# name: Continuous Deployment

# on:
#   push:
#     branches:
#       - main

# jobs:
#   deploy:
#     name: Deploy to EC2
#     runs-on: ubuntu-latest

#     steps:
#       # Checkout the code
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Set up Node.js
#       - name: Set up Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: 16

#       # Install dependencies
#       - name: Install dependencies
#         run: npm ci

#       # Build the Angular application
#       - name: Build Angular App
#         run: npm run build --prod

#       # Deploy to EC2
#       - name: Deploy to EC2
#         env:
#           EC2_HOST: ${{ secrets.EC2_HOST }}
#           EC2_USER: ${{ secrets.EC2_USER }}
#           EC2_KEY: ${{ secrets.EC2_KEY }}
#           TARGET_DIR: /var/www/html/
#         run: |
#           # Create a temporary directory for the build files
#           tar -czf dist.tar.gz -C dist/unitsource .
          
#           # Copy build files to EC2
#           scp -i $EC2_KEY dist.tar.gz $EC2_USER@$EC2_HOST:/tmp/
          
#           # Connect to EC2, extract files, and set permissions
#           ssh -i $EC2_KEY $EC2_USER@$EC2_HOST << 'EOF'
#             sudo rm -rf $TARGET_DIR/*
#             sudo tar -xzf /tmp/dist.tar.gz -C $TARGET_DIR
#             sudo chown -R nginx:nginx $TARGET_DIR
#             sudo systemctl restart nginx
#           EOF
#       # - name: Deploy to EC2
#       #   env:
#       #     EC2_HOST: ${{ secrets.EC2_HOST }}
#       #     EC2_USER: ${{ secrets.EC2_USER }}
#       #     EC2_KEY: ${{ secrets.EC2_KEY }}
#       #     TARGET_DIR: /var/www/html
#       #   run: |
#       #     # Save the EC2 private key to a temporary file
#       #     echo "$EC2_KEY" > private_key.pem
#       #     chmod 600 private_key.pem  # Set proper permissions for the private key

#       #     # Verify the build directory exists and list files
#       #     ls -alh dist/unitsource

#       #     # Create a tarball of the build files
#       #     tar -czf dist.tar.gz -C dist/unitsource .

#       #     # Copy build files to EC2 (with disabled host key verification)
#       #     scp -o StrictHostKeyChecking=no -i private_key.pem dist.tar.gz $EC2_USER@$EC2_HOST:/tmp/

#       #     # Connect to EC2, extract files, and set permissions
#       #     ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
#       #       sudo rm -rf $TARGET_DIR/*
#       #       sudo tar -xzf /tmp/dist.tar.gz -C $TARGET_DIR
#       #       sudo chown -R nginx:nginx $TARGET_DIR
#       #       sudo systemctl restart nginx
#       #     EOF

#       #     # Clean up by removing the private key file
#       #     rm -f private_key.pem


name: Continuous Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up SSH Agent
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Deploy to EC2
        run: |
          echo "Deploying to EC2..."
          ssh -o StrictHostKeyChecking=no ec2-user@<EC2_INSTANCE_IP> << 'EOF'
          # Commands to deploy the application on the EC2 instance
          cd /path/to/your/application
          git pull origin main
          npm install
          npm run build
          pm2 restart all
          EOF
